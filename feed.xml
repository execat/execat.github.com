<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title></title>
<description>execat's blog</description>
<link>http://execat.github.io</link>
<atom:link href="http://execat.github.io/feed.xml" rel="self" type="application/rss+xml" />

<item>
<title>Packages in Fedora!</title>
<description>&lt;p&gt;Pushed a few RubyGem packages to the Fedora 19/rawhide repos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rubygem-connection_pool&lt;/li&gt;
  &lt;li&gt;rubygem-dotenv&lt;/li&gt;
  &lt;li&gt;rubygem-faker&lt;/li&gt;
  &lt;li&gt;rubygem-lumberjack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The progress with other packages can be viewed &lt;a href=&quot;https://github.com/execat/Packages/tree/master/rpmspecs&quot;&gt;here&lt;/a&gt;. Check &lt;a href=&quot;https://github.com/execat/Packages/blob/master/rpmspecs/readme-generate.sh&quot;&gt;this&lt;/a&gt; cool script that auto-updates the script for me while you are at it.&lt;/p&gt;

&lt;p&gt;All my packages in the Fedora repos can be found &lt;a href=&quot;https://admin.fedoraproject.org/pkgdb/users/packages/anujmore&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
<pubDate>Tue, 06 Aug 2013 20:20:00 +0000</pubDate>
<link>http://execat.github.io/2013/packages-fedora</link>
<guid isPermaLink="true">http://execat.github.io/2013/packages-fedora</guid>
</item>

<item>
<title>One book per month</title>
<description>&lt;p&gt;So I finally figured how I have been a book-avese person, and it would really do me good if I read a classic book or two.&lt;/p&gt;

&lt;p&gt;And when I say that, the few books/texts in my head are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SICP&lt;/li&gt;
  &lt;li&gt;Learn you a Haskell (Though it is not all &lt;em&gt;that&lt;/em&gt; classic, the language is ;-))&lt;/li&gt;
  &lt;li&gt;A collection of papers on functional programming lying in a corner of my hard-disk&lt;/li&gt;
  &lt;li&gt;Mahabharata, unabridged&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Planning to write a separate page listing out all the books, and hopefully cancelling one book per month.&lt;/p&gt;

&lt;p&gt;EDIT: One book per month looks a bit far-fetched. Make it one book per two months.&lt;/p&gt;
</description>
<pubDate>Tue, 06 Aug 2013 20:14:00 +0000</pubDate>
<link>http://execat.github.io/2013/one-book-per-month</link>
<guid isPermaLink="true">http://execat.github.io/2013/one-book-per-month</guid>
</item>

<item>
<title>Local .bundle directory</title>
<description>&lt;p&gt;So, turns out having a separate &lt;code&gt;.bundle&lt;/code&gt; directory for each project resoloved loads of my issues straight-away.&lt;/p&gt;

&lt;p&gt;For a Ruby app with a Gemfile, execute &lt;code&gt;bundle install --path .bundle&lt;/code&gt; (or whatever you prefer instead of &lt;code&gt;.bundle&lt;/code&gt; directory) to install the Gems locally. Subsequent &lt;code&gt;bundle&lt;/code&gt; commands do not need &lt;code&gt;--path&lt;/code&gt; parameter to be specified. &lt;/p&gt;

&lt;p&gt;One can then execute the locally installed Gems through &lt;code&gt;bundle exec &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That, with &lt;code&gt;rvm&lt;/code&gt; for managing the same Ruby versions. Nice way to keep the entire project base on the same version of the software irrespective of the OSes/distros being used.&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jul 2013 10:30:00 +0000</pubDate>
<link>http://execat.github.io/2013/local-dot-bundle</link>
<guid isPermaLink="true">http://execat.github.io/2013/local-dot-bundle</guid>
</item>

<item>
<title>A Redmond distribution: review</title>
<description>&lt;p&gt;1.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I’m running a Redmond distribution, Windows 7 I think it’s called. It’s not bad, reasonably stable, the installer works just fine, has a nice polished look to it, and seems to have built-in Wine support because Office runs fine on it. I’ve heard it’s been forked into something called Metro/Win8 which is pretty unpleasant, so I’ll be sticking with the current distro for awhile.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I tried that same distribution, I tried really hard to like it, I really did, but it just didn’t work out. After a couple of weeks of constant irritations like being nagged about viruses and rebooting in the middle of important work I just gave up. That Windows distribution is trying hard to imitate Linux but just can’t seem to get the details right.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I tried that one as well. The package management seems totally broken and there’s no SSH. WTF?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I take it you have never tried to use the Windows 7 installer on a system with more then one SATA drive, then. Let’s just say that between bizarre, undocumented requirements (the installer expects to be installed on the first SATA drive; you can select another drive but you’ll get an error message after configuring the partitions) and the cryptic error messages given if you don’t meet them (something about not finding a system partition) it’s clearly not ready for prime time but was shipped regardless. I haven’t looked at the Metro one yet but I hope they switched to something more reasonable like Ubiquity. Home-grown installers clearly aren’t Redmond’s forte.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Once you’ve got it running it’s a mixed bag. The built-in Wine is flat-out awesome (it even has near-perfect compatibility with DirectX) but the preinstalled software is extremely sparse for such a big distro (you don’t even get GCC!), for some reason the login screen doesn’t allow you to select the window manager, leaving you stuck with the default one… Oh yeah, and you can’t even get out of X11 while the system is running. No shell, no nothing. Who does that?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;6.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I’d recommend it for compatibility purposes only. If you need Wine for something this is the distro to use. For everything else just use another distro.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://linux.slashdot.org/comments.pl?sid=3403937&amp;amp;cid=42676945&quot;&gt;Got to love /.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 12 Jul 2013 09:30:00 +0000</pubDate>
<link>http://execat.github.io/2013/a-redmond-distribution</link>
<guid isPermaLink="true">http://execat.github.io/2013/a-redmond-distribution</guid>
</item>

<item>
<title>Class scopes in Python</title>
<description>&lt;p&gt;Consider a class like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; Creates one MyClass object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; Creates another MyClass object&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#=&amp;gt; a.x = 123 and b.x = 0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;#=&amp;gt; a.x = 123 and b.x = 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not that bad. Nothing weird.&lt;/p&gt;

&lt;p&gt;Well, that’s just because it doesn’t matter much for immutable objects like ints, but if x was a mutable type, like a list, it could have unexpected consequences.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; Creates one MyClass object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; Creates another MyClass object&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;#=&amp;gt; a.x = [1,2,3] and b.x = [1,2,3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; a.x = [1,2,3,4] and b.x = [1,2,3,4]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#=&amp;gt; a.x = [4,3,2,1] and b.x = [4,3,2,1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Solution: MyClass should bind instance variables in &lt;code&gt;__init__&lt;/code&gt;, rather than doing it in the class scope.&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jul 2013 11:10:00 +0000</pubDate>
<link>http://execat.github.io/2013/python-init</link>
<guid isPermaLink="true">http://execat.github.io/2013/python-init</guid>
</item>

<item>
<title>LISP: Slashdot wisdom</title>
<description>&lt;p&gt;Discussion on &lt;a href=&quot;http://developers.slashdot.org/comments.pl?sid=3938715&amp;amp;cid=44193175&quot;&gt;/.&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;AC: “I find it hard to believe ANYTHING derived from LISP could simplify anything.”&lt;/p&gt;

  &lt;p&gt;marcello_dl: “Because lisp-style languages are already simplified to the extreme, you mean? Phew, for a moment I thought I spotted a troll.”&lt;/p&gt;

  &lt;p&gt;smitty_one_each: “The question is whether simplifying the syntax down to a nubbin really flattens the learning curve or not.”&lt;/p&gt;

  &lt;p&gt;AC: “That’s &lt;em&gt;a&lt;/em&gt; question. &lt;em&gt;The&lt;/em&gt; question is why does LISP persist with that syntax. There is a very very deep reason for this which you should discover for yourself. Once you’ve discovered that, the learning curve will be irrelevant for two reasons. The less important reason being you’ll already be over it “&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;That being said, LISP is not even a contender to my &lt;a href=&quot;/2013/domain-specific-languages-1&quot;&gt;DSL project&lt;/a&gt;. Interesting language though.&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jul 2013 00:15:00 +0000</pubDate>
<link>http://execat.github.io/2013/lisp-slashdot-wisdom</link>
<guid isPermaLink="true">http://execat.github.io/2013/lisp-slashdot-wisdom</guid>
</item>

<item>
<title>Domain specific languages</title>
<description>&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;domain specific language&lt;/a&gt; is a type of programming language or specification language dedicated to a particular problem domain, a particular problem representation technique, and/or a particular solution technique.&lt;/p&gt;

&lt;p&gt;During my visit to &lt;a href=&quot;http://rubyconfindia.org/2013/&quot;&gt;RubyConf&lt;/a&gt;, I was introduced to two Ruby DSLs:&lt;/p&gt;

&lt;h1 id=&quot;musehttpsgithubcomsausheongmuse&quot;&gt;&lt;a href=&quot;https://github.com/sausheong/muse&quot;&gt;Muse&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;A RubyGem by Sau Sheong that (among other things) can be used to represent music. An excellent implementation of the gem was demonstrated in the talk: an auto music generator from any input data called &lt;a href=&quot;https://gist.github.com/sausheong/5891040&quot;&gt;“otto”&lt;/a&gt; (auto, otto. Get it? :-D).&lt;/p&gt;

&lt;p&gt;Alternative (older) version &lt;a href=&quot;https://github.com/sausheong/muse/blob/master/songs/otto.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;biorubyhttpsgithubcombiorubybioruby&quot;&gt;&lt;a href=&quot;https://github.com/bioruby/bioruby&quot;&gt;BioRuby&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;A RubyGem that according to the authors “is an open source Ruby library for developing bioinformatics software”.&lt;/p&gt;

&lt;p&gt;This was the first talk on RubyConf after the keynote, and for me, was mindblowing. I am looking for the video to be uploaded.&lt;/p&gt;

&lt;p&gt;As if the gem by itself wasn’t impressive, it has even more plugins(?) that run on top of the BioRuby. A repo of these gems can be found on &lt;a href=&quot;http://www.biogems.info/&quot;&gt;biogems.info&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Takes shit to another level by introducing “1” indexed strings among other things (to “make it easier for the biotechnologists”).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This inspired me to pick up my pet project that I started a year ago: &lt;a href=&quot;https://github.com/execat/musica&quot;&gt;musica&lt;/a&gt;; a DSL for composing music.&lt;/p&gt;

&lt;p&gt;More on that later (because I am undecided about the language to use :-P)&lt;/p&gt;
</description>
<pubDate>Fri, 05 Jul 2013 22:35:00 +0000</pubDate>
<link>http://execat.github.io/2013/domain-specific-languages-1</link>
<guid isPermaLink="true">http://execat.github.io/2013/domain-specific-languages-1</guid>
</item>

<item>
<title>Welcome to Jekyll!</title>
<description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
<pubDate>Mon, 01 Jul 2013 20:50:00 +0000</pubDate>
<link>http://execat.github.io/2013/welcome-to-jekyll</link>
<guid isPermaLink="true">http://execat.github.io/2013/welcome-to-jekyll</guid>
</item>

</channel>
</rss>
